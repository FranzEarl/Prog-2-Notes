#ifndef MYLIB_H
#define MYLIB_H

#include <stdbool.h>
#include <stddef.h>


// Ctype
bool isAlnum(int c);
bool isAlpha(int c);
bool isDigit(int c);
bool isSpace(int c);
bool isPunct(int c);
bool isXDigit(int c);
bool isLower(int c);
bool isUpper(int c);
int ToLower(int c);
int ToUpper(int c);



// String
size_t strLen(const char *str);
char *strCat(char *dest, const char *src);
char *strNCat(char *dest, const char *src, size_t n);
char *strCpy(char *dest, const char *src);
char *strNCpy(char *dest, const char *src, size_t n);
char *strChr(const char *str, int c);
char *strRChr(const char *str, int c);
int strCmp(const char *str1, const char *str2);
int strNCmp(const char *str1, const char *str2, size_t n);
size_t strSpn(const char *str, const char *delim);
size_t strCSpn(const char *str, const char *reject);
char *strStr(const char *haystack, const char *needle);
char *strTok(char *str, const char *delim);


// Ctype functions
//*********************************************************************


bool isAlnum(int c) {
    return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}

bool isAlpha(int c) {
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}

bool isDigit(int c) {
    return (c >= '0' && c <= '9');
}

bool isSpace(int c) {
    return (c == ' ');
}

bool isPunct(int c) {
    return ((c >= '!' && c <= '/') || (c >= ':' && c <= '@') ||
            (c >= '[' && c <= '`') || (c >= '{' && c <= '~'));
}

bool isXDigit(int c) {
    return (isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'));
}

bool isLower(int c) {
    return (c >= 'a' && c <= 'z');
}

bool isUpper(int c) {
    return (c >= 'A' && c <= 'Z');
}

int ToLower(int c) {
    if (c >= 'A' && c <= 'Z') {
        return c + ('a' - 'A');
    }
    return c;
}

int ToUpper(int c) {
    if (c >= 'a' && c <= 'z') {
        return c - ('a' - 'A');
    }
    return c;
}

//*********************************************************************



// String functions
//*********************************************************************


size_t strLen(const char *str) {
    size_t len = 0;
    while (*str != '\0') {
        len++;
        str++;
    }
    return len;
}

char *strCat(char *dest, const char *src) {
    char *ptr = dest + strLen(dest);
    while (*src != '\0') {
        *ptr++ = *src++;
    }
    *ptr = '\0';
    return dest;
}

char *strNCat(char *dest, const char *src, size_t n) {
    char *ptr = dest + strLen(dest);
    size_t i;
    for (i = 0; i < n && src[i] != '\0'; i++) {
        ptr[i] = src[i];
    }
    ptr[i] = '\0';
    return dest;
}

char *strCpy(char *dest, const char *src) {
    char *ptr = dest;
    while ((*ptr++ = *src++) != '\0');
    return dest;
}

char *strNCpy(char *dest, const char *src, size_t n) {
    char *ptr = dest;
    size_t i;
    for (i = 0; i < n && src[i] != '\0'; i++) {
        dest[i] = src[i];
    }
    for (; i < n; i++) {
        dest[i] = '\0';
    }
    return ptr;
}

char *strChr(const char *str, int c) {
    while (*str != '\0') {
        if (*str == c) {
            return (char *)str;
        }
        str++;
    }
    if (c == '\0') {
        return (char *)str;
    }
    return NULL;
}

char *strRChr(const char *str, int c) {
    const char *lastOccurrence = NULL;
    while (*str != '\0') {
        if (*str == c) {
            lastOccurrence = str;
        }
        str++;
    }
    if (c == '\0') {
        return (char *)str;
    }
    return (char *)lastOccurrence;
}

int strCmp(const char *str1, const char *str2) {
    while (*str1 && *str2 && *str1 == *str2) {
        str1++;
        str2++;
    }
    return *(unsigned char *)str1 - *(unsigned char *)str2;
}

int strNCmp(const char *str1, const char *str2, size_t n) {
    for (size_t i = 0; i < n; ++i) {
        if (str1[i] != str2[i]) {
            return (unsigned char)str1[i] - (unsigned char)str2[i];
        }
        if (str1[i] == '\0') {
            return 0;
        }
    }
    return 0;
}

size_t strSpn(const char *str, const char *delim) {
    size_t count = 0;
    const char *ptr;
    while (*str) {
        ptr = delim;
        while (*ptr) {
            if (*str == *ptr) {
                count++;
                break;
            }
            ptr++;
        }
        if (*ptr == '\0') break;
        str++;
    }
    return count;
}

size_t strCSpn(const char *str, const char *reject) {
    size_t count = 0;
    const char *ptr;
    while (*str) {
        ptr = reject;
        while (*ptr) {
            if (*str == *ptr) {
                return count;
            }
            ptr++;
        }
        count++;
        str++;
    }
    return count;
}

char *strStr(const char *haystack, const char *needle) {
    size_t needleLen = strLen(needle);
    while (*haystack) {
        if (strNCmp(haystack, needle, needleLen) == 0) {
            return (char *)haystack;
        }
        haystack++;
    }
    return NULL;
}

char *strTok(char *str, const char *delim) {
    static char *lastToken = NULL;
    if (str == NULL && lastToken == NULL) return NULL;
    char *start = (str != NULL) ? str : lastToken;
    start += strSpn(start, delim);
    if (*start == '\0') {
        lastToken = NULL;
        return NULL;
    }
    char *end = start + strCSpn(start, delim);
    if (*end != '\0') {
        *end = '\0';
        lastToken = end + 1;
    } else {
        lastToken = NULL;
    }
    return start;
}   


//*********************************************************************


#endif
